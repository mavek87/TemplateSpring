package com.matteoveroni.templatespring.utils;

import java.lang.reflect.Field;
import java.util.Objects;

// TODO: autogenerated with chatgpt. Check the class and do some refactoring if possible!
public class ObjectComparator {

    // TODO: are fields equals except (list of fields to exclude from the check)

    public static boolean areFieldsEqual(Object obj1, Object obj2) {
        // Check if objects are null or of different classes
        if (obj1 == null || obj2 == null) {
            return false;
        }

        Class<?> class1 = obj1.getClass();
        Class<?> class2 = obj2.getClass();

        if (class1.equals(class2)) {
            // Objects are of the same class, use reflection
            Field[] fields = class1.getDeclaredFields();

            try {
                for (Field field : fields) {
                    field.setAccessible(true);
                    Object value1 = field.get(obj1);
                    Object value2 = field.get(obj2);

                    if (!Objects.equals(value1, value2)) {
                        return false;
                    }
                }
                return true;
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return false;
            }
        } else {
            // Objects are of different classes, compare their fields
            Field[] fields1 = class1.getDeclaredFields();
            Field[] fields2 = class2.getDeclaredFields();

            if (fields1.length != fields2.length) {
                return false;
            }

            try {
                for (int i = 0; i < fields1.length; i++) {
                    Field field1 = fields1[i];
                    Field field2 = fields2[i];

                    field1.setAccessible(true);
                    field2.setAccessible(true);

                    Object value1 = field1.get(obj1);
                    Object value2 = field2.get(obj2);

                    if (!Objects.equals(value1, value2)) {
                        return false;
                    }
                }
                return true;
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return false;
            }
        }
    }
}